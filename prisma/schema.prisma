generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// -------------------------
/// ENUMS
/// -------------------------

enum Gender {
  Male
  Female
  Other
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
  COLLECTOR_TEAM
  DEPARTMENT_TEAM
  SUPERINTENDENT_OF_POLICE
  MP_RAJYA_SABHA
}

enum AuthType {
  DETAILS
  GOOGLE
}

enum ComplaintStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  BACKLOG
  NEED_DETAILS
  INVALID
}

enum Priority {
  NORMAL
  HIGH
}

enum Department {
  PUBLIC_WORKS
  WATER_SUPPLY
  SANITATION
  HEALTH
  URBAN_PLANNING
  POLICE
}

enum Language {
  HINDI
  ENGLISH
  MARATHI
}

enum ComplaintType {
  COMPLAINT
  SUGGESTION
}

enum InteractionType {
  CO_SIGN
  REPORT
}

enum ReportReason {
  INAPPROPRIATE_CONTENT
  MISLEADING_OR_FALSE_INFO
  SPAM_OR_DUPLICATE
  PRIVACY_VIOLATION
  HARASSMENT_OR_HATE_SPEECH
  OTHER
}

enum BugStatus {
  OPEN
  RESOLVED
  IGNORED
}

enum ComplaintPhase {
  INIT
  LANGUAGE
  COMPLAINT_TYPE
  TALUKA
  SUGGESTION_DESCRIPTION

  DESCRIPTION
  ATTACHMENT
  LOCATION

  CONFIRMATION
  COMPLETED
}

/// -------------------------
/// CORE ENTITIES
/// -------------------------

model User {
  id       Int      @id @default(autoincrement())
  name     String
  age      Int?
  gender   Gender?
  role     Role     @default(USER)
  slug     String   @unique
  mobile   String   @unique
  email    String?  @unique
  address  String?
  authType AuthType @default(DETAILS)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  complaints   Complaint[]
  interactions Interaction[]
  bugs         Bug[]
  history      ComplaintHistory[]

  @@index([mobile])
  @@index([email])
  @@index([role])
}

model Complaint {
  id          Int             @id @default(autoincrement())
  userId      Int
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String?
  description String?
  status      ComplaintStatus @default(OPEN)
  priority    Priority        @default(NORMAL)
  department  Department?
  category    String?
  subcategory String?
  taluka      String?
  location    String?
  latitude    Decimal?
  longitude   Decimal?

  language Language       @default(ENGLISH)
  type     ComplaintType?
  phase    ComplaintPhase

  media Json[] @default([])

  isMediaApproved    Boolean  @default(false)
  isPublic           Boolean  @default(false)
  coSignCount        Int      @default(0)
  reportCount        Int      @default(0)
  linkedComplaintIds String[] @default([])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  history       ComplaintHistory[]
  interactions  Interaction[]
  statusUpdates StatusUpdate[]

  @@index([userId])
  @@index([status])
  @@index([department])
  @@index([priority])
  @@index([category, subcategory])
}

model ComplaintHistory {
  id          Int       @id @default(autoincrement())
  complaintId Int
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        Role
  action      String
  notes       String?
  attachment  String?
  eta         DateTime?
  createdAt   DateTime  @default(now())

  @@index([complaintId])
  @@index([userId])
  @@index([createdAt])
}

model Interaction {
  id           String          @id @default(uuid())
  type         InteractionType
  reportReason ReportReason?
  text         String?
  userId       Int
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  complaintId  Int
  complaint    Complaint       @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  createdAt    DateTime        @default(now())

  @@unique([userId, complaintId, type])
}

model Bug {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  reporterId  Int
  reporter    User      @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  status      BugStatus @default(OPEN)
  priority    Priority  @default(NORMAL)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model StatusUpdate {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  imageUrl    String?
  videoUrl    String?
  complaintId Int?
  complaint   Complaint? @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  isActive    Boolean    @default(true)
  expiresAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([complaintId])
  @@index([isActive])
  @@index([createdAt])
}
